generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/* ---------- Citas (entrevistas) ---------- */
model Appointment {
  id           String   @id @default(cuid())
  fullName     String
  phone        String
  email        String?
  notes        String?
  startsAt     DateTime
  endsAt       DateTime
  status       AppointmentStatus @default(pending)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([startsAt])
}

enum AppointmentStatus {
  pending
  confirmed
  cancelled
}

/* ---------- Productos ---------- */
model Product {
  id         String   @id @default(cuid())
  slug       String   @unique
  name       String
  price      Decimal  @db.Decimal(10,2)
  desc       String
  longDesc   String?  @db.Text
  imageUrl   String?
  composition Json?   // ej: [{ nombre, cantidad }, ...]
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  promotions Promotion[]   // promos asociadas (opcional)
}

/* ---------- Promociones ---------- */
model Promotion {
  id         String   @id @default(cuid())
  title      String
  // Relación  con producto:
  productId  String?
  product    Product? @relation(fields: [productId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  blurb      String?         // descripción corta
  priceNew   Decimal? @db.Decimal(10,2)
  priceOld   Decimal? @db.Decimal(10,2)
  imageUrl   String?  
  imageAlt   String?
  ctaUrl     String?         // ej: "/tienda/crema-hidratante" si no ligas productId
  startsAt   DateTime?
  endsAt     DateTime?
  isActive   Boolean  @default(true)
  priority   Int      @default(0)  // para ordenar en el carrusel
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([isActive, startsAt, endsAt])
}

/* ---------- Usuarios ---------- */
enum UserRole {
  user
  admin
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String    // hash bcrypt
  role      UserRole  @default(user)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  sessions  Session[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}


